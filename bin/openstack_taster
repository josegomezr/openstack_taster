#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'

suites = {
  'security' => 'Runs the security test suite',
  'volumes' => 'Runs the volume test suite'
}
settings = {}

ARGV << '-h' if ARGV.empty?

parser = OptionParser.new do |opts|
  opts.banner = "Usage: openstack_taster <image_name> <ssh_user> {suite_name}  [--create-snapshot]\n" \
                "   or: openstack_taster <image_name> <ssh_user> [--create-snapshot]\n" \
                '   or: openstack_taster <option>'
  opts.separator('')
  opts.separator('Available Arguments:')
  opts.on('-c', '--create-snapshot', 'Create snapshot upon test failure.') do
    settings[:create_snapshot] = true
  end
  opts.on('-h', '--help', 'Print usage information.') do
    puts opts
    settings[:exit] = true
  end
  opts.separator('')
  opts.separator('Test Suites:')
  suites.each do |suite, desc|
    opts.separator("    #{suite}\t\t#{desc}")
  end
end

begin
  params = parser.parse!
rescue OptionParser::InvalidOption => io
  puts io.message
  puts
  puts parser
  exit 1
rescue StandardError => e
  puts 'Argument parsing failed:'
  puts e.message
  puts e.backtrace
  exit 1
end

exit if settings[:exit] # exit inside OptionParser causes problems.

begin
  case params.length
  when 2
    suites.each_key { |suite| settings[suite.to_sym] = true }
  when 3
    raise "#{params[2]} is not a test suite!" unless suites.include? params[2]
    settings[params[2].to_sym] = true
  else
    raise 'Incorrect format!'
  end
rescue StandardError => e
  puts e.message
  puts
  puts parser
  exit(1)
end

image_name = params[0]
settings[:ssh_user] = params[1]

require 'fog/openstack'
require 'openstack_taster'

auth_url = String.new(ENV['OS_AUTH_URL'])
auth_url << '/tokens' unless auth_url.end_with?('tokens')
auth_url.freeze

OPENSTACK_CREDS = {
  openstack_auth_url: auth_url,
  openstack_username: ENV['OS_USERNAME'],
  openstack_tenant:   ENV['OS_TENANT_NAME'],
  openstack_api_key:  ENV['OS_PASSWORD']
}.freeze

SSH_KEYS = {
  keypair: ENV['OS_SSH_KEYPAIR'],
  private_key: ENV['OS_PRIVATE_SSH_KEY'],
  public_key: ENV['OS_PUBLIC_SSH_KEY'] # REVIEW
}.freeze

controller_host = auth_url.split(':')[1].delete('//')
LOG_DIR = "logs/#{controller_host}"

compute = Fog::Compute::OpenStack.new(OPENSTACK_CREDS)
volume  = Fog::Volume::OpenStack.new(OPENSTACK_CREDS)
image   = Fog::Image::OpenStack.new(OPENSTACK_CREDS)
network = Fog::Network::OpenStack.new(OPENSTACK_CREDS)

exit OpenStackTaster.new(
  compute, volume, image, network,
  SSH_KEYS, LOG_DIR
).taste(image_name, settings)
