#!/usr/bin/env ruby
# frozen_string_literal: true

$test_volumes = true
$test_security = true

def print_usage(exit_val = 0)
    puts "Usage: openstack_taster <test_suite> <image_name>"
    puts "   or: openstack_taster <option>"
    puts
    puts "Available arguments:"
    puts "\t-h, --help\tPrint usage information"
    puts
    puts "Test Suites:"
    puts "\tall\t\tRuns all test suites."
    puts "\tvolume\t\tRuns the volume test suite."
    puts "\tsecurity\tRuns the security test suite."
    exit(exit_val)
end

if ARGV.length == 1
  case ARGV[0]
  when '-h', '--help'
    print_usage
  else
    puts "#{ARGV[0]} is not a valid flag!"
    puts
    print_usage 1
  end
elsif ARGV.length == 2
  case ARGV[0]
  when 'volume'
    $test_security = false
  when 'security'
    $test_volumes = false
  when 'all'
  else
    puts "#{ARGV[0]} is not a valid test suite!"
    puts
    print_usage 1
  end
else
  print_usage 1
end

require 'fog/openstack'
require 'openstack_taster'

auth_url = String.new(ENV['OS_AUTH_URL'])
auth_url << '/tokens' unless auth_url.end_with?('tokens')
auth_url.freeze

OPENSTACK_CREDS = {
  openstack_auth_url: auth_url,
  openstack_username: ENV['OS_USERNAME'],
  openstack_tenant:   ENV['OS_TENANT_NAME'],
  openstack_api_key:  ENV['OS_PASSWORD']
}.freeze

SSH_KEYS = {
  keypair: ENV['OS_SSH_KEYPAIR'],
  private_key: ENV['OS_PRIVATE_SSH_KEY'],
  public_key: ENV['OS_PUBLIC_SSH_KEY'] # REVIEW
}.freeze

controller_host = auth_url.split(':')[1].delete('//')
LOG_DIR = "logs/#{controller_host}"

compute = Fog::Compute::OpenStack.new(OPENSTACK_CREDS)
volume  = Fog::Volume::OpenStack.new(OPENSTACK_CREDS)
image   = Fog::Image::OpenStack.new(OPENSTACK_CREDS)
network = Fog::Network::OpenStack.new(OPENSTACK_CREDS)

OpenStackTaster.new(
  compute, volume, image, network,
  SSH_KEYS, LOG_DIR
).taste ARGV[1] 
